<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AI Search Methods</title>
    <url>/2019/07/23/AI-Search-Methods/</url>
    <content><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>Recently I am learning <a href="http://ai.berkeley.edu/project_overview.html">Berkley AI Pac-man Project</a>, and it requires to use Search methods for finding fixed food dots, this article is used to record the learning process. </p>
<a id="more"></a>

<p><img src="https://cdn.jsdelivr.net/gh/jamesxwang/cdn@master/img/AI/AI-pacman_game.gif" alt="pacman-game"></p>
<h3 id="Uninformed-Search-Methods"><a href="#Uninformed-Search-Methods" class="headerlink" title="Uninformed Search Methods"></a>Uninformed Search Methods</h3><h4 id="Depth-First-Search"><a href="#Depth-First-Search" class="headerlink" title="Depth-First Search"></a>Depth-First Search</h4><p>Unlike Breadth-first Search (BFS) is to try all the possibilities of a vertex before accessing the next vertex., DFS is from vertex to vertex. After every possible attempt at a given vertex, it goes back to the last vertex to try the next vertex.<br>Algorithm template for DFS:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">void Dfs(Vertex V)</span><br><span class="line">&#123;</span><br><span class="line">    Visited[v] = True;</span><br><span class="line">    <span class="keyword">for</span> each W adjacent to V</span><br><span class="line">        <span class="keyword">if</span>(!Visited[W])</span><br><span class="line">            Dfs(W);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Illustration: (Nodes at depth 3 are assumed to have no successors)<br><img src="https://cdn.jsdelivr.net/gh/jamesxwang/cdn@master/img/AI/AI-DFS.png" alt="AI-DFS"></p>
<p>DFS is like a stack, Last in first out (LIFO), and the successors in searchAgent.py is described as </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">def getSuccessors(self, state):</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    Returns successor states, the actions they require, and a cost of 1.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     As noted in search.py:</span></span><br><span class="line"><span class="string">         For a given state, this should return a list of triples,</span></span><br><span class="line"><span class="string">     (successor, action, stepCost), where &#x27;successor&#x27; is a</span></span><br><span class="line"><span class="string">     successor to the current state, &#x27;action&#x27; is the action</span></span><br><span class="line"><span class="string">     required to get there, and &#x27;stepCost&#x27; is the incremental</span></span><br><span class="line"><span class="string">     cost of expanding to that successor</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    successors = []</span><br><span class="line">    <span class="keyword">for</span> action <span class="keyword">in</span> [Directions.NORTH, Directions.SOUTH, Directions.EAST, Directions.WEST]:</span><br><span class="line">        x,y = state</span><br><span class="line">        dx, dy = Actions.directionToVector(action)</span><br><span class="line">        nextx, nexty = int(x + dx), int(y + dy)</span><br><span class="line">        <span class="keyword">if</span> not self.walls[nextx][nexty]:</span><br><span class="line">            nextState = (nextx, nexty)</span><br><span class="line">            cost = self.costFn(nextState)</span><br><span class="line">            successors.append( ( nextState, action, cost) )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Bookkeeping for display purposes</span></span><br><span class="line">    self._expanded += 1</span><br><span class="line">    <span class="keyword">if</span> state not <span class="keyword">in</span> self._visited:</span><br><span class="line">        self._visited[state] = True</span><br><span class="line">        self._visitedlist.append(state)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> successors</span><br></pre></td></tr></table></figure>
<p>West is the last direction appending to the successors[], so that the agent will turn left at every crossings with DFS algorithm, just like the gif below:<br><img src="https://raw.githubusercontent.com/jamesxwang/cdn/master/img/AI/AI-DFS.gif" alt="AI-DFS"><br>It is very obvious that DFS algorithm is not optimal nor complete.</p>
<h4 id="Breadth-First-Search"><a href="#Breadth-First-Search" class="headerlink" title="Breadth-First Search"></a>Breadth-First Search</h4><p><img src="https://raw.githubusercontent.com/jamesxwang/cdn/master/img/AI/AI-BFS.gif" alt="AI-BFS"></p>
<h4 id="Uniform-Cost-Search"><a href="#Uniform-Cost-Search" class="headerlink" title="Uniform-Cost Search"></a>Uniform-Cost Search</h4><p>TBC…</p>
]]></content>
      <categories>
        <category>Study Notes</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>AI</tag>
        <tag>search algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Advanced JavaScript</title>
    <url>/2019/09/15/Advanced-JavaScript/</url>
    <content><![CDATA[<p>This article records Javascript questions that I think is important but often ignored by people.<br><img src="https://cdn.jsdelivr.net/gh/jamesxwang/cdn@master/img/js/JavaScript.jpg" alt="JavaScript"></p>
<a id="more"></a>

<hr>
<h1 id="Array-prototype-map"><a href="#Array-prototype-map" class="headerlink" title="Array.prototype.map()"></a>Array.prototype.map()</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>].map(<span class="built_in">parseInt</span>)</span><br><span class="line"></span><br><span class="line">what &amp; why ?</span><br></pre></td></tr></table></figure>
<p>The <code>map()</code> method creates a new array with the results of calling a provided function on every element in the calling array. See more in <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map">Array.prototype.map() | MDN</a>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.map(<span class="function">(<span class="params">num</span>) =&gt;</span> num + <span class="number">1</span>); <span class="comment">// [2, 3, 4]</span></span><br></pre></td></tr></table></figure>
<p>For each iteration map, <code>parseInt()</code> passes two parameters: string and index. So the code actually executed is:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>].map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">parseInt</span>(item, index)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>This will return</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;1&#x27;</span>, <span class="number">0</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;2&#x27;</span>, <span class="number">1</span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;3&#x27;</span>, <span class="number">2</span>) <span class="comment">// NaN, 3 cannot be divided by 2</span></span><br></pre></td></tr></table></figure>
<p>So:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>].map(<span class="built_in">parseInt</span>)</span><br><span class="line"><span class="comment">// 1, NaN, NaN</span></span><br></pre></td></tr></table></figure>
<p>In order to achieve the function we want, we could do this:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>].map(<span class="built_in">Number</span>)</span><br><span class="line"></span><br><span class="line">OR</span><br><span class="line"></span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>].map(<span class="function"><span class="params">n</span> =&gt;</span> <span class="built_in">parseInt</span>(n,<span class="number">10</span>))</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Difference of extends method between ES5 and ES6 </span><br></pre></td></tr></table></figure>
<h2 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h2><ul>
<li>Prototype Inheritance</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Parent</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Children</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Children</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.age = <span class="number">24</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prototype extension</span></span><br><span class="line">Children.prototype = <span class="keyword">new</span> Parent(<span class="string">&#x27;James&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Children.prototype.constructor === Parent.prototype.constructor = Parent</span></span><br><span class="line"><span class="keyword">var</span> test = <span class="keyword">new</span> Children();</span><br><span class="line"></span><br><span class="line"><span class="comment">// test.constructor === Children.prototype.constructor === Parent</span></span><br><span class="line"></span><br><span class="line">test.age <span class="comment">// 24</span></span><br><span class="line">test.getName(); <span class="comment">// James</span></span><br></pre></td></tr></table></figure>
<p>We can find that the whole inheritance process is delegated through the pointing between prototype chains until the final result of “constructed by constructors” is formed.</p>
<ul>
<li>Constructor Inheritance</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Parent</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Children</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  Parent.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test = <span class="keyword">new</span> Children(<span class="string">&#x27;Kiki&#x27;</span>);</span><br><span class="line"></span><br><span class="line">test.name <span class="comment">// Kiki</span></span><br></pre></td></tr></table></figure>
<p>The key of constructor inheritance is to get the members and methods of the parent class on the newly created objects in the future by calling the parent class inside the child class, that is, by using the apply() or call() method.</p>
<h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">show</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Name:<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>， Age: <span class="subst">$&#123;<span class="built_in">this</span>.age&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> son = <span class="keyword">new</span> Son(<span class="string">&#x27;James&#x27;</span>, <span class="number">24</span>);</span><br><span class="line"></span><br><span class="line">son.show(); <span class="comment">// Name: James, Age: 24</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Study Notes</category>
        <category>Front End</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Learning Notes</title>
    <url>/2018/06/26/Docker-Learning-Notes/</url>
    <content><![CDATA[<h1 id="Introduction："><a href="#Introduction：" class="headerlink" title="Introduction："></a>Introduction：</h1><ul>
<li>Series of <strong>Docker Learning Notes</strong> are based on:<br>OS：Ubuntu 16.04 LTS<br>Java version：Jdk 1.8</li>
</ul>
<h3 id="What-is-Docker"><a href="#What-is-Docker" class="headerlink" title="What is Docker?"></a>What is Docker?</h3><p><img src="https://cdn.jsdelivr.net/gh/jamesxwang/cdn@master/img/docker/docker.jpg" alt="docker"></p>
<ul>
<li>Docker’s idea comes from cargo containers. What problem can cargo containers solve? For example, goods can be put in order on a large ship and all kinds of goods are standardized by containers, containers and containers do not interact with each other so that we don’t need a special fruit ship or a chemical carrier. As long as these goods are properly packaged in containers, we can transport them with one large ship. Docker is a similar idea like this. Cloud computing is now very popular, and cloud computing is like a big cargo ship while docker is a container.<a id="more"></a>

</li>
</ul>
<p>1&gt;&nbsp;Different applications may have different application environments, for example, dependencies for websites developed by .Net and by PHP are not the same. If install their dependencies on one server, debugging will take a long time and dependencies might be conflict to each other. For example, IIS and Apache access port conflicts. At this point, you have to isolate the website developed by .Net and the website developed by PHP. Traditionally, we can create different virtual machines on the server and put different applications on different virtual machines, but the cost of virtual machines is relatively high. Docker can realize the function of virtual machine isolation application environment, and it costs less than virtual machine.</p>
<p>2&gt;&nbsp;When you develop the software on Ubuntu, but the operation and maintenance management is on CentOS, the operation and maintenance of your software from the development environment to the production environment will encounter some Ubuntu to CentOS problems, such as: a special version of the database only supported on Ubuntu but not on CentOS, so that you have to solve such problems during the process of transfer between operations. But if you use docker, you can directly transfer the development environment to operation and deploy by docker directly and faster than regular deployment.</p>
<p>3&gt;&nbsp;On the server load, if you use virtual machines instead of docker, free memory will not be used.</p>
<h3 id="Life-cycle-of-docker-（image-container-registry）"><a href="#Life-cycle-of-docker-（image-container-registry）" class="headerlink" title="Life cycle of docker:（image, container, registry）"></a>Life cycle of docker:（image, container, registry）</h3><h4 id="1-docker-image"><a href="#1-docker-image" class="headerlink" title="1.docker image"></a>1.docker image</h4><ul>
<li>Docker image is actually made up of a file system, which is called UnionFS. At the bottom of the Docker image is bootfs. This layer is the same as our typical Linux/Unix system, including boot loader and kernel. When the boot is loaded, the kernel is all in memory. At this point, the right to use memory is transferred from bootfs to the kernel, and the system will also unload bootfs. The first layer of Docker on bootfs is rootfs (root file system). Rootfs is the distribution of different operating systems, such as Ubuntu, Centos and so on.<br><img src="https://cdn.jsdelivr.net/gh/jamesxwang/cdn@master/img/docker/docker-image.png" alt="docker-image"><h4 id="2-docker-container"><a href="#2-docker-container" class="headerlink" title="2.docker container"></a>2.docker container</h4></li>
<li><code>docker run</code>&nbsp;Instantiate an image to a container, similar to “new” in java.<br></li>
<li>Some parameters for <code>docker run</code>：<br><br><code>-d</code> : Run container in background<br><br><code>-e</code> : Set environment variables<br><br><code>-p</code> : Host port:Container port <br><br><code>--name</code> : Set name for container</li>
</ul>
<h4 id="3-docker-registry"><a href="#3-docker-registry" class="headerlink" title="3.docker registry"></a>3.docker registry</h4><ul>
<li>A place to store and share docker images.<br><br>eg., Docker Hub: &nbsp;<a href="https://hub.docker.com/">hub.docker.com</a></li>
</ul>
<h3 id="Deploying-a-web-application-with-docker"><a href="#Deploying-a-web-application-with-docker" class="headerlink" title="Deploying a web application with docker"></a>Deploying a web application with docker</h3><h4 id="1-pull-source-code-to-host"><a href="#1-pull-source-code-to-host" class="headerlink" title="1.pull source code to host"></a>1.pull source code to host</h4><p>Subversion: <code>svn checkout svn://svn_address [host_volume]</code><br><br>Git:<code>git clone [.git file]</code></p>
<h4 id="2-Packaging-jar-war-file-through-Maven-ANT-Other"><a href="#2-Packaging-jar-war-file-through-Maven-ANT-Other" class="headerlink" title="2.Packaging .jar/.war file through Maven/ANT/Other"></a>2.Packaging .jar/.war file through Maven/ANT/Other</h4><p><code>mvn package</code> / <code>ant makewar</code> / etc.</p>
<h4 id="3-Write-a-Dockerfile"><a href="#3-Write-a-Dockerfile" class="headerlink" title="3.Write a Dockerfile"></a>3.Write a Dockerfile</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM [imageName：tag]</span><br><span class="line">MAINTAINER [author] [contact_e-mail]</span><br><span class="line">ADD [.jar file] [volume_in_docker_container]</span><br><span class="line">RUN bash -c <span class="string">&#x27;touch /opt/xxx.jar&#x27;</span></span><br><span class="line"><span class="comment">#Change timezone</span></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&quot;Asia/Shanghai&quot;</span> &gt; /etc/timezone &amp;&amp; dpkg-reconfigure -f noninteractive tzdata</span><br><span class="line"><span class="comment">#expose default port [8080_for_tomcat]</span></span><br><span class="line">EXPOSE 8080</span><br><span class="line"><span class="comment">#execute .war/.jar file</span></span><br><span class="line">CMD [<span class="string">&quot;catalina.sh&quot;</span>,<span class="string">&quot;run&quot;</span>]       --<span class="keyword">for</span> xxx.war</span><br><span class="line">CMD [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/opt/xxx.jar&quot;</span>]   --<span class="keyword">for</span> xxx.jar</span><br></pre></td></tr></table></figure>
<h4 id="4-Docker-build"><a href="#4-Docker-build" class="headerlink" title="4.Docker build"></a>4.Docker build</h4><ul>
<li><code>docker build -t [imageName] .</code><br><em>DO NOT FORGET</em> the <code>.</code> at the back.</li>
</ul>
<h4 id="5-Docker-run"><a href="#5-Docker-run" class="headerlink" title="5.Docker run"></a>5.Docker run</h4><ul>
<li><code>docker run -d -p [port]:[port in container]</code></li>
</ul>
<h3 id="Other-commands-for-docker"><a href="#Other-commands-for-docker" class="headerlink" title="Other commands for docker"></a>Other commands for docker</h3><p><code>sudo docker ps -a</code> : List all containers<br><code>sudo docker images</code> : List all images<br><code>sudo docker images|grep test|awk &#39;&#123;print $3 &#125;&#39;|xargs sudo docker rmi</code> : remove all images that contain ‘test’</p>
<h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><p>Before Installing docker, we have to install and configure necessary environments.</p>
<h3 id="Configure-Java-environment"><a href="#Configure-Java-environment" class="headerlink" title="Configure Java environment"></a>Configure Java environment</h3><ul>
<li><p>Jdk Download link：<br><code>http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</code></p>
</li>
<li><p>Install Jdk</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir /opt/java</span><br><span class="line">sudo mv jdk-8u162-linux-x64.tar.gz /opt/java</span><br><span class="line"><span class="built_in">cd</span> /opt/java/</span><br><span class="line">sudo tar -zxvf *</span><br><span class="line">sudo rm *.tar.gz</span><br></pre></td></tr></table></figure></li>
<li><p>Configure environment variables: <code>sudo vim ~/.bashrc</code></p>
</li>
<li><p>Add JAVA_HOME, PATH and CLASSPATH for Jdk：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/java/jdk1.8.0_162</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br></pre></td></tr></table></figure></li>
<li><p>Remenber to source the configuration file!<br><code>sudo source ~/.bashrc</code></p>
<h3 id="Configure-Maven-Environment"><a href="#Configure-Maven-Environment" class="headerlink" title="Configure Maven Environment"></a>Configure Maven Environment</h3></li>
<li><p>Maven Download link: <code>https://maven.apache.org/download.cgi</code></p>
</li>
<li><p>Install Maven</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir /opt/maven</span><br><span class="line">sudo mv apache-maven3.5.2.tar.gz /opt/maven</span><br><span class="line"><span class="built_in">cd</span> /opt/maven</span><br><span class="line">sudo tar -zxvf *</span><br><span class="line">sudo rm *.tar.gz</span><br></pre></td></tr></table></figure></li>
<li><p>Configure environment variables: <code>sudo vim etc/profile</code></p>
</li>
<li><p>Add M2_HOME, PATH and CLASSPATH for Maven：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> M2_HOME=/opt/maven/apache-maven-3.5.2</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$M2_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=<span class="variable">$CLASSPATH</span>:<span class="variable">$M2_HOME</span>/lib</span><br></pre></td></tr></table></figure></li>
<li><p>Remenber to source the configuration file: <code>sudo source etc/profile</code></p>
</li>
<li><p>Check version for Java and Maven：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java- version</span><br><span class="line">mvn -v</span><br></pre></td></tr></table></figure>
<h3 id="Install-and-configure-Docker"><a href="#Install-and-configure-Docker" class="headerlink" title="Install and configure Docker"></a>Install and configure Docker</h3></li>
<li><p>Install docker with apt</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker.io</span><br></pre></td></tr></table></figure></li>
<li><p>In China, the speed of downloading docker image from official library is slow,so I configured a daocloud accelerator for docker:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://ff626ecd.m.daocloud.io</span><br><span class="line">sudo systemctl restart docker.service</span><br></pre></td></tr></table></figure></li>
<li><p>Check docker version: <code>docker --version</code></p>
</li>
</ul>
<h1 id="Integration-with-Jenkins"><a href="#Integration-with-Jenkins" class="headerlink" title="Integration with Jenkins"></a>Integration with Jenkins</h1><h3 id="Why-choose-Jenkins"><a href="#Why-choose-Jenkins" class="headerlink" title="Why choose Jenkins?"></a>Why choose Jenkins?</h3><p>Jenkins is an extensible continuous integration engine, mainly used in build / test software projects continuously and automatically and monitoring some of the tasks that are executed on time. So it can ensure developers and related personnel save time and effort to improve development efficiency.</p>
<h3 id="Install-Jenkins"><a href="#Install-Jenkins" class="headerlink" title="Install Jenkins"></a>Install Jenkins</h3><ul>
<li>Download and install Jenkins<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -  </span><br><span class="line">sudo sh -c <span class="string">&#x27;echo deb http://pkg.jenkins.io/debian-stable binary/ &gt; /etc/apt/sources.list.d/jenkins.list&#x27;</span></span><br><span class="line">sudo apt-get update  </span><br><span class="line">sudo apt-get install jenkins</span><br></pre></td></tr></table></figure></li>
<li>Visit <a href="http://localhost:8080/">localhost:8080</a> for Jenkins home page<br>Initial password for admin: <code> vim /var/lib/jenkins/secrets/initialAdminPassword</code></li>
</ul>
<h1 id="SSL-Configuration"><a href="#SSL-Configuration" class="headerlink" title="SSL Configuration"></a>SSL Configuration</h1><h3 id="Differences-between-Http-and-Https"><a href="#Differences-between-Http-and-Https" class="headerlink" title="Differences between Http and Https"></a>Differences between Http and Https</h3><p>● The HyperText Transfer Protocol (HTTP) protocol is used to transmit information between the Web browser and the web server. The HTTP protocol sends content in plaintext, and does not provide any way of data encryption. If an attacker intercepts the transmission message between the Web browser and the web server, the information can be read directly. Therefore, HTTP protocol is not suitable for transmitting some sensitive information, such as credit card number, password and other payment information.</p>
<p>● In order to solve this defect of the HTTP protocol, it is necessary to use another protocol: Hypertext Transfer Protocol Secure (HTTPS). In order to secure data transmission, HTTPS adds SSL protocol on the basis of HTTP. SSL relies on certificates to verify the identity of the server and encrypts the communication between the browser and the server.</p>
<p><img src="https://cdn.jsdelivr.net/gh/jamesxwang/cdn@master/img/docker/HTTPvsHTTPS.jpg" alt="HTTPvsHTTPS"></p>
<p>● The data transmitted by the HTTP protocol are not encrypted, that is, plaintext, so it is very unsafe to use the HTTP protocol to transmit privacy information. In order to ensure the encryption and transmission of these privacy data, the Netscape Co designed the SSL (Secure Sockets Layer) protocol to encrypt the data transmitted by the HTTP protocol–HTTPS. To put it simply, the HTTPS protocol is a network protocol constructed by SSL+HTTP protocol, which is capable of encrypting transmission and identity authentication,so it’s more secure than HTTP protocol.</p>
<h3 id="Apply-for-a-SSL-certificate"><a href="#Apply-for-a-SSL-certificate" class="headerlink" title="Apply for a SSL certificate"></a>Apply for a SSL certificate</h3><p>● There are several ways to apply a SSL certificate, and I chose TrustAsia SSL certificate.The process of application will not be detailed.<br>Below are the certificates for Apache, IIS, Nginx and Tomcat:<br><img src="https://cdn.jsdelivr.net/gh/jamesxwang/cdn@master/img/docker/SSL-certificate-1.png" alt="SSL-certificate-1"></p>
<h3 id="Configure-SSL-for-Spring-Boot-project"><a href="#Configure-SSL-for-Spring-Boot-project" class="headerlink" title="Configure SSL for Spring Boot project"></a>Configure SSL for Spring Boot project</h3><p>● Put the certificate( .jks file in tomcat folder) in the project at the application.yml level directory.<br><img src="https://cdn.jsdelivr.net/gh/jamesxwang/cdn@master/img/docker/SSL-certificate-2.png" alt="SSL-certificate-2"><br>● Add configurations for ssl in applcation.yml( or application.properties)<br><img src="https://cdn.jsdelivr.net/gh/jamesxwang/cdn@master/img/docker/SSL-configurations.png" alt="SSL-configurations"></p>
<p>● Add http redirect in the Spring Boot application file</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EmbeddedServletContainerFactory <span class="title">servletContainer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    TomcatEmbeddedServletContainerFactory tomcat=<span class="keyword">new</span> TomcatEmbeddedServletContainerFactory()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessContext</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">            SecurityConstraint securityConstraint=<span class="keyword">new</span> SecurityConstraint();</span><br><span class="line">            securityConstraint.setUserConstraint(<span class="string">&quot;CONFIDENTIAL&quot;</span>);<span class="comment">//confidential</span></span><br><span class="line">            SecurityCollection collection=<span class="keyword">new</span> SecurityCollection();</span><br><span class="line">            collection.addPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">            securityConstraint.addCollection(collection);</span><br><span class="line">            context.addConstraint(securityConstraint);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    tomcat.addAdditionalTomcatConnectors(httpConnector());</span><br><span class="line">    <span class="keyword">return</span> tomcat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Connector <span class="title">httpConnector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Connector connector = <span class="keyword">new</span> Connector(<span class="string">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span>);</span><br><span class="line">    connector.setScheme(<span class="string">&quot;http&quot;</span>);</span><br><span class="line">    <span class="comment">// The port number of the HTTP that Connector monitors</span></span><br><span class="line">    connector.setPort(<span class="number">80</span>);</span><br><span class="line">    connector.setSecure(<span class="keyword">false</span>);</span><br><span class="line">    <span class="comment">// Redirect port after monitoring HTTP port</span></span><br><span class="line">    connector.setRedirectPort(<span class="number">443</span>);</span><br><span class="line">    <span class="keyword">return</span> connector;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Add-‘Post-Steps’-‘Execute-shell’-in-Jenkins"><a href="#Add-‘Post-Steps’-‘Execute-shell’-in-Jenkins" class="headerlink" title="Add ‘Post Steps’-‘Execute shell’ in Jenkins"></a>Add ‘Post Steps’-‘Execute shell’ in Jenkins</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/lib/jenkins/<span class="built_in">jobs</span>/wxblog</span><br><span class="line">sudo docker build -t wxblog:<span class="variable">$BUILD_NUMBER</span> .</span><br><span class="line">sudo docker ps -a | grep wxblog | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | xargs sudo docker rm -f</span><br><span class="line">sudo docker run -d -p 80:80 -p 443:443 --name wxblog_<span class="variable">$BUILD_NUMBER</span> wxblog:<span class="variable">$BUILD_NUMBER</span></span><br><span class="line">sudo docker images|grep wxblog|awk <span class="string">&#x27;&#123;print $3 &#125;&#x27;</span>|xargs sudo docker rmi</span><br></pre></td></tr></table></figure>
<p>● DON’T FORGET to run both ports: <code>-p 80:80 -p 443:443</code>.<br><br><br><br>● Congratulation! When you visit <a href="http://www.amazingxu.xyz/">http://www.amazingxu.xyz</a> , the website will redirect to <a href="https://www.amazingxu.xyz/">https://www.amazingxu.xyz</a> with a secure mark beside your address bar : )</p>
]]></content>
      <categories>
        <category>Study Notes</category>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Setting up Spring REST API with Swagger2</title>
    <url>/2018/07/15/Setting-up-Spring-REST-API-with-Swagger2/</url>
    <content><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>When creating a RESTful API, good documentation is instrumental.<br><br>Moreover, every change in the API should be simultaneously described in the reference documentation. Accomplishing this manually is a tedious exercise, so automation of the process was inevitable.</p>
<a id="more"></a>
<p>If you are not familiar with Swagger, you should visit <a href="http://swagger.io">its web page</a> to learn more before continuing with this article.</p>
<h3 id="Target-Project"><a href="#Target-Project" class="headerlink" title="Target Project"></a>Target Project</h3><p>The creation of the REST service I use is my own project–<a href="http://amazingxu.xyz">amazingxu.xyz</a>. Source code are available on my <a href="http://github.com/jamesxwang">Github</a>.</p>
<h3 id="Adding-the-Maven-Dependency"><a href="#Adding-the-Maven-Dependency" class="headerlink" title="Adding the Maven Dependency"></a>Adding the Maven Dependency</h3><p>To add it to our Maven project, we need to add dependencies in the pom.xml file.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Integrating-Swagger-2-into-the-Project"><a href="#Integrating-Swagger-2-into-the-Project" class="headerlink" title="Integrating Swagger 2 into the Project"></a>Integrating Swagger 2 into the Project</h3><h4 id="Java-Configuration"><a href="#Java-Configuration" class="headerlink" title="Java Configuration"></a>Java Configuration</h4><p>The configuration of Swagger mainly centers around the Docket bean.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ParameterBuilder tokenPar = <span class="keyword">new</span> ParameterBuilder();</span><br><span class="line">    List&lt;Parameter&gt; pars = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    tokenPar.name(<span class="string">&quot;Authorization&quot;</span>)</span><br><span class="line">            .description(<span class="string">&quot;Token&quot;</span>)</span><br><span class="line">            .modelRef(<span class="keyword">new</span> ModelRef(<span class="string">&quot;string&quot;</span>))</span><br><span class="line">            .defaultValue(<span class="string">&quot;Bearer &quot;</span>)</span><br><span class="line">            .parameterType(<span class="string">&quot;header&quot;</span>)</span><br><span class="line">            .required(<span class="keyword">false</span>).build();</span><br><span class="line">    pars.add(tokenPar.build());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">            .select()</span><br><span class="line">            .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))</span><br><span class="line">            .build()</span><br><span class="line">            .globalOperationParameters(pars)</span><br><span class="line">            .apiInfo(apiInfo());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Swagger 2 is enabled through the<code>@EnableSwagger2</code> annotation.<br><br>By adding <code>@Api(value="VALUE",description="DESC")</code> , <code>@RestController</code> and <code>@RequestMapping("ReqMap")</code> annotation to the controller in the Spring Boot project, RESTful API UI can be seen by visiting <a href="http://amazingxu.xyz/swagger-ui.html">http://amazingxu.xyz/swagger-ui.html</a></p>
<p><br><br></p>
<h5 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h5><p><a href="http://www.baeldung.com/swagger-2-documentation-for-spring-rest-api">http://www.baeldung.com/swagger-2-documentation-for-spring-rest-api</a></p>
]]></content>
      <categories>
        <category>Study Notes</category>
        <category>Back End</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring Boot</tag>
        <tag>Swagger2</tag>
        <tag>RESTful API</tag>
      </tags>
  </entry>
  <entry>
    <title>Socket Dictionary</title>
    <url>/2018/09/07/Socket-Dictionary/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>This is project 1 of <a href="https://handbook.unimelb.edu.au/2018/subjects/comp90015">Distributed Systems (COMP90015) Semester 2, 2018</a>, University of Melbourne. The program implemented a dictionary server and a client through multiple threads and sockets. The dictionary system follows a Client-Server structure with a thread-per-connection architecture. Dictionary datafile uses JSON format with a Java version of 8 and maven version of 3.5 for packaging jar files.  </p>
<h3 id="Download-the-source-code"><a href="#Download-the-source-code" class="headerlink" title="Download the source code"></a>Download the source code</h3><p>Link: <a href="https://github.com/jamesxwang/Dictionary/">https://github.com/jamesxwang/Dictionary/</a></p>
<a id="more"></a>

<h3 id="How-to-run"><a href="#How-to-run" class="headerlink" title="How to run?"></a>How to run?</h3><ul>
<li>Server: <code>java -jar Server.jar</code></li>
<li>Client: <code>java -jar Client.jar &lt;optional-host&gt; &lt;optional-port&gt;</code> </li>
</ul>
<h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><p>Once Server established the Server Socket, Clients can connect to the server and query, add, remove words from the dictionary on Server.</p>
<h2 id="System-structure"><a href="#System-structure" class="headerlink" title="System structure"></a>System structure</h2><h3 id="Class-Structure"><a href="#Class-Structure" class="headerlink" title="Class Structure"></a>Class Structure</h3><p>In this design, there are total 15 classes, in which 7 of them are core classes in the Server end, 4 of them are core classes in the Client end, 4 enumeration files for message transmission. Dependencies and the definition between classes are shown below.<br><img src="https://cdn.jsdelivr.net/gh/jamesxwang/cdn@master/img/socket/server-class-diagram.png" alt="server-class-diagram"><br>The main class is &lt; Server &gt; which extends “JavaFX.Application” for creating a Server GUI for the server. Class &lt; ServerController &gt; handles the actions when pressing button on the UI of the server, including establishing and closing the ServerSocket. &lt; Handler &gt; is a class that extends Thread, does the loop to monitor new clients connected to the server socket. If there is a client sending a request for connecting to the socket, the server socket accepts it and create a new Thread for each client in the class MessageListener. &lt; MessageListener &gt; is a class that extends Thread, handling the requests sent by the clients, such as searching words in the dictionary, adding a new word to the dictionary and deleting an exist word from the dictionary. &lt; Information &gt; is a class for getting and setting information from / to the table on the server UI. Class &lt; Dictionary &gt; handles between HashMap and the dictionary file, including operations of reading, writing and updating JSON file from / to HashMap. &lt; Message &gt; is a class that extends Serializable, setting up a message criterion between client-end. &lt; MessageType &gt; and &lt; Status &gt; are enumeration files for message types (add, search and delete) and (exist, inexistent and connected), respectively.<br><img src="https://cdn.jsdelivr.net/gh/jamesxwang/cdn@master/img/socket/client-class-diagram.png" alt="client-class-diagram"><br>As for the Client end, class &lt; Client &gt; is the main class, which extends “JavaFX.Application” for creating the GUI. Class &lt; Controller &gt; initializes background animation for the GUI and implements the logic when pressing down buttons on the client-end’s UI. As long as the UI is opened, it sends a request for connecting to the server through stream socket. Once it is connected, &lt; MessageListener &gt; handles for messages from the client UI and sends it to the output stream, meanwhile listen to the input stream from the socket. Same as the server, Class &lt; Message &gt;, &lt; MessageType &gt; and &lt; Status &gt; are in client-end are as same as the server. The overall class design of core classes is shown below.<br><img src="https://cdn.jsdelivr.net/gh/jamesxwang/cdn@master/img/socket/overall-class-diagram.png" alt="overall-class-diagram"></p>
<h3 id="Interaction-Diagram"><a href="#Interaction-Diagram" class="headerlink" title="Interaction Diagram"></a>Interaction Diagram</h3><p><img src="https://cdn.jsdelivr.net/gh/jamesxwang/cdn@master/img/socket/interaction-diagram.png" alt="interaction-diagram"><br>The Interaction diagram is shown above. As long as the Server Socket is established, clients can make requests through their own thread. Server updates the dictionary once it has been changed so that the next query from clients doesn’t need to read the dictionary again.</p>
<h3 id="Flow-Chart"><a href="#Flow-Chart" class="headerlink" title="Flow Chart"></a>Flow Chart</h3><p><img src="https://cdn.jsdelivr.net/gh/jamesxwang/cdn@master/img/socket/flow-chart.png" alt="flow-chart"><br>The procedure of the system is shown in the flow chart diagram above. First, the server socket establishes when the start button on server UI is clicked, then creates a thread for listening new connects. Once a client request for connecting to the server, a thread will be created for connecting the client and the server. Message listener in clients and server will be handling the message transmission. The operation of writing new words and definition to the dictionary file is synchronized so that clients can write to the server one by one.</p>
<h2 id="System-design"><a href="#System-design" class="headerlink" title="System design"></a>System design</h2><h3 id="Functional"><a href="#Functional" class="headerlink" title="Functional"></a>Functional</h3><p>Clients can query the meaning of a given word, add a new word and remove an existing word, the input and output are clear and users can know exactly what when wrong when errors occur. For the server, it can handle every message been sent by every client and catch all exceptions.</p>
<h3 id="Multi-Threads"><a href="#Multi-Threads" class="headerlink" title="Multi-Threads"></a>Multi-Threads</h3><p>The designing for socket-thread I use is thread per connection, i.e. whenever a new connection is created, a thread is created. For the server, one thread will be handling connections between clients and one thread will be handling operations such as searching words in the dictionary, etc.</p>
<h3 id="Graphical-User-Interface"><a href="#Graphical-User-Interface" class="headerlink" title="Graphical User Interface"></a>Graphical User Interface</h3><p>I designed and implemented a graphical user interface for both Server and Client using JavaFX in Java 8. Among them, a TableView is created for listing operations sent by the Client. The UI snapshot is shown below.<br><img src="https://cdn.jsdelivr.net/gh/jamesxwang/cdn@master/img/socket/Server1.png" alt="Server1"><br><img src="https://cdn.jsdelivr.net/gh/jamesxwang/cdn@master/img/socket/Client1.png" alt="Client1"> </p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>The reasons for designing this socket dictionary system to “Thread-per-connection” are as follows. First of all, it is guaranteed that the main thread will only block on the accept call and will not be blocked by other situations, especially by the specific application processing code such as searching words etc. Second, unlike “Thread-per-request”, it is more convenient for server managing the clients’ requests. But this kind of design can’t guarantee connection concurrency, which means if thousands of people try to connect one server, only the first few of them can connect successful and others would wait until the previous clients disconnect the server.</p>
]]></content>
      <categories>
        <category>Study Notes</category>
        <category>Back End</category>
      </categories>
      <tags>
        <tag>Socket</tag>
        <tag>Multi-thread</tag>
      </tags>
  </entry>
  <entry>
    <title>TrackHub</title>
    <url>/2019/06/17/TrackHub/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p><img src="https://cdn.jsdelivr.net/gh/jamesxwang/cdn@master/img/clustercloudcomputing/trackhub.png" alt="TrackHub"><br>This is project 2 of <a href="https://handbook.unimelb.edu.au/2019/subjects/comp90024">Cluster and Cloud Computing (COMP90024) Semester 1, 2019</a>, University of Melbourne, named “TrackHub”. TrackHub  is  a  real-time  platform  that  could  track  the  twitter  user  and  theirpost content.  Our system analyzes the text and image posted by the user.  Theresults will be grouped by geolocation bounding box for further analysis.  Thefrontend  will  also  able  to  load  AURIN  data  to  build  the  data  visualizations.Currently, our system focuses on three of the seven deadly sins, the Lust, theWrath, and the Gluttony.</p>
<h3 id="Video-Link"><a href="#Video-Link" class="headerlink" title="Video Link"></a>Video Link</h3><p>Youtube link: <a href="https://youtu.be/M5xhnEHwKNg/">https://youtu.be/M5xhnEHwKNg/</a></p>
<a id="more"></a>

<h3 id="Project-Background"><a href="#Project-Background" class="headerlink" title="Project Background"></a>Project Background</h3><ul>
<li>Build a cloud based scalable system that can track Twitter user movement. The software system should be easy be maintain and fault-tolerant.</li>
<li>Ability to analysis the text and image content of the Tweets based on the Seven Deadly Sins. The data analysis section should also be easy to scale or add additional models to analyze the different content.</li>
</ul>
<h3 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h3><p><a href="https://github.com/jamesxwang/COMP90024-TrackHub">https://github.com/jamesxwang/COMP90024-TrackHub</a></p>
]]></content>
      <categories>
        <category>Study Notes</category>
        <category>Full Stack</category>
      </categories>
      <tags>
        <tag>VUE</tag>
        <tag>Django</tag>
        <tag>Ansible</tag>
        <tag>NLP</tag>
        <tag>Grafana</tag>
        <tag>CouchDB</tag>
        <tag>ReST</tag>
        <tag>OSS</tag>
        <tag>NSFW</tag>
      </tags>
  </entry>
  <entry>
    <title>Whistle Proxy</title>
    <url>/2021/02/13/Whistle-Proxy/</url>
    <content><![CDATA[<blockquote>
<p>前端开发环境切换神器</p>
</blockquote>
<p>在开发过程中，经常会遇到后端接口还没完成或者没有发布到所需环境的情况。</p>
<p>为了不阻塞前端开发，我们可以用whistle进行请求接口的代理。</p>
<h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><p>首先，我们先安装whistle，可以参考官网教程: <a href="https://github.com/avwo/whistle">https://github.com/avwo/whistle</a></p>
<p>命令行中输入 <code>w2 start</code> 开启whistle，默认端口为<code>8899</code></p>
<a id="more"></a>

<h2 id="Chrome-Extension"><a href="#Chrome-Extension" class="headerlink" title="Chrome Extension"></a>Chrome Extension</h2><p>访问：<a href="https://chrome.google.com/webstore/category/extensions%EF%BC%8C">https://chrome.google.com/webstore/category/extensions，</a> 搜索<code>Proxy SwitchyOmega</code>，将插件添加至Chrome中，添加一个whistle情景模式如图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/jamesxwang/cdn/img/whistle/whistle-1.png" alt="whistle-1"></p>
<p><img src="https://cdn.jsdelivr.net/gh/jamesxwang/cdn/img/whistle/whistle-2.png" alt="whistle-2"></p>
<p><img src="https://cdn.jsdelivr.net/gh/jamesxwang/cdn/img/whistle/whistle-3.png" alt="whistle-3"></p>
<p>浏览器访问<code>http://127.0.0.1:8899/</code>即可进入配置页面。</p>
<h2 id="Enable-Https-proxy"><a href="#Enable-Https-proxy" class="headerlink" title="Enable Https proxy"></a>Enable Https proxy</h2><p>下载根证书并安装它。</p>
<p><img src="https://cdn.jsdelivr.net/gh/jamesxwang/cdn/img/whistle/whistle-4.png" alt="whistle-4"></p>
<h2 id="Whistle-Vase-Plugin"><a href="#Whistle-Vase-Plugin" class="headerlink" title="Whistle Vase Plugin"></a>Whistle Vase Plugin</h2><p>然后，我们还需要安装一个插件，名为whistle.vase。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g whistle.vase</span><br></pre></td></tr></table></figure>
<p>Unix / Linux用户需要加sudo进行安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo npm install -g whistle.vase</span><br></pre></td></tr></table></figure>
<p>在插件一栏能看到vase即安装成功。</p>
<p><img src="https://cdn.jsdelivr.net/gh/jamesxwang/cdn/img/whistle/whistle-5.png" alt="whistle-5"></p>
<h1 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h1><p>可以通过点击<a href="http://127.0.0.1:8899/#plugins">Plugins</a>里的vase链接跳转或者直接访问 <a href="http://127.0.0.1:8899/whistle.vase/">http://127.0.0.1:8899/whistle.vase/</a> 进入到vase的配置页。</p>
<p>vase有多种模板引擎，我们这里因为要mock接口数据，所以进行下图的操作：</p>
<p><img src="https://cdn.jsdelivr.net/gh/jamesxwang/cdn/img/whistle/whistle-6.png" alt="whistle-6"></p>
<p>script模板引擎的API如下：</p>
<ol>
<li><a href="https://github.com/whistle-plugins/whistle.vase#outdata-delay-speed">out</a>: 所有的数据都要通过该方法才能输出到响应中，也可以用 write</li>
<li><a href="https://github.com/whistle-plugins/whistle.vase/blob/master">status</a>: 设置输出的http状态码，默认为200，也可以写成 statusCode(code)</li>
<li><a href="https://github.com/whistle-plugins/whistle.vase#headername-value">header</a>: 设置响应头</li>
<li><a href="https://github.com/whistle-plugins/whistle.vase#statuscode">headers</a>: 批量设置响应头</li>
<li><a href="https://github.com/whistle-plugins/whistle.vase#filepath">file</a>: 读取本地文件</li>
<li><a href="https://github.com/whistle-plugins/whistle.vase#geturloptions">get</a>: 通过get方式获取线上文件，支持https及http协议</li>
<li><a href="https://github.com/whistle-plugins/whistle.vase#posturloptions">post</a>: 通过post方式获取线上文件，支持https及http协议</li>
<li><a href="https://github.com/whistle-plugins/whistle.vase#requestoptions">request</a>: 通过自定义方式获取线上文件，支持https及http协议</li>
<li><a href="https://github.com/whistle-plugins/whistle.vase#jsondata">json</a>: 将线上或本地文件、或字符串解析成json对象</li>
<li><a href="https://github.com/whistle-plugins/whistle.vase#mergejson--jsonn">merge</a>: 合并json对象</li>
<li><a href="https://github.com/whistle-plugins/whistle.vase#randomarg1--argn">random</a>: 随机输出</li>
<li><a href="https://github.com/whistle-plugins/whistle.vase#joinarr-seperator">join</a>: 合并字符串</li>
<li><a href="https://github.com/whistle-plugins/whistle.vase#req%E5%AF%B9%E8%B1%A1">req</a>: 用户请求对象</li>
<li><a href="https://github.com/whistle-plugins/whistle.vase#rendertpl-locals-enginetype">render</a>: 渲染模板</li>
</ol>
<p>更多API详情可以在这里看到：<a href="https://github.com/whistle-plugins/whistle.vase#script-api">https://github.com/whistle-plugins/whistle.vase#script-api</a></p>
<h1 id="Mock-ReSTful-API"><a href="#Mock-ReSTful-API" class="headerlink" title="Mock ReSTful API"></a>Mock ReSTful API</h1><p>接下来我们可以使用 out(data, delay, speed) 去模拟接口返回的数据：</p>
<p><img src="https://cdn.jsdelivr.net/gh/jamesxwang/cdn@master/img/whistle/whistle-7.png" alt="whistle-7"></p>
<p>最后就是在Rules一栏新建一个规则，把 需要mock的接口地址 和刚刚创建的 vase script模板 用空格分开写到一行就可以啦：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;iaas.cloud.tencent.com&#x2F;cgi&#x2F;capi?i&#x3D;monitor&#x2F;Describexxx vase:&#x2F;&#x2F;Describexxx</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/jamesxwang/cdn/img/whistle/whistle-8.png" alt="whistle-8"></p>
]]></content>
      <tags>
        <tag>Study Notes</tag>
        <tag>Front End</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2018/05/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>V2ray + TLS + Nginx 反向代理科学上网</title>
    <url>/2021/07/03/v2ray-tls-nginx/</url>
    <content><![CDATA[<blockquote>
<p>本文仅做学习记录用途</p>
</blockquote>
<h1 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h1><p>First of all，申请境外服务器，e.g. CentOS / Ubuntu，并配置好安全组，关闭防火墙。</p>
<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="添加CentOS-7-Nginx-yum资源库："><a href="#添加CentOS-7-Nginx-yum资源库：" class="headerlink" title="添加CentOS 7 Nginx yum资源库："></a>添加CentOS 7 Nginx yum资源库：</h2><p>使用yum从Nginx源服务器中获取来安装Nginx：</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -Uvh http:&#x2F;&#x2F;nginx.org&#x2F;packages&#x2F;centos&#x2F;7&#x2F;noarch&#x2F;RPMS&#x2F;nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure>

<h2 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure>
<h2 id="启动-Nginx"><a href="#启动-Nginx" class="headerlink" title="启动 Nginx"></a>启动 Nginx</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start nginx.service</span><br></pre></td></tr></table></figure>
<p>如果启动失败，可能是安装 CentOS 时默认安装了 Apache，需要先卸载Apache：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl stop httpd</span><br><span class="line">yum remove -y httpd</span><br></pre></td></tr></table></figure>
<p>开机启动 Nginx：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable nginx.service</span><br></pre></td></tr></table></figure>
<p>查看 Nginx 配置文件目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure>
<h2 id="部署网页"><a href="#部署网页" class="headerlink" title="部署网页"></a>部署网页</h2><p>申请域名并将SSL证书放置到 /usr/share/nginx/cert/，网页打包好的静态资源文件放到 /usr/share/nginx/html/ 下，附上 Nginx 配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cat &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    listen       443 ssl;</span><br><span class="line">    server_name  example.com;</span><br><span class="line"></span><br><span class="line">    #access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;host.access.log  main;</span><br><span class="line"></span><br><span class="line">    ssl_certificate     &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;cert&#x2F;1_example.com_bundle.crt;</span><br><span class="line">    ssl_certificate_key &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;cert&#x2F;2_example.com.key;</span><br><span class="line">    ssl_session_cache   shared:SSL:1m;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_ciphers         HIGH:!aNULL:!MD5;</span><br><span class="line">    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # redirect server error pages to the static page &#x2F;50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">    location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">        root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F;v2ray &#123;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        proxy_intercept_errors on;</span><br><span class="line">        error_page 400 &#x3D; https:&#x2F;&#x2F;example.com&#x2F;;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:5055; #假设WebSocket监听端口为5055</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">        # 向后端传递访客ip</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="V2Ray"><a href="#V2Ray" class="headerlink" title="V2Ray"></a>V2Ray</h1><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>服务端安装教程参照: <a href="https://github.com/v2fly/fhs-install-v2ray">https://github.com/v2fly/fhs-install-v2ray</a></p>
<p>安装后修改配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cat &#x2F;usr&#x2F;local&#x2F;etc&#x2F;v2ray&#x2F;config.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;inbounds&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;port&quot;: 5055,</span><br><span class="line">	        &quot;listen&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">            &quot;protocol&quot;: &quot;vmess&quot;,</span><br><span class="line">            &quot;settings&quot;: &#123;</span><br><span class="line">                &quot;clients&quot;: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;id&quot;: &quot;xxxxxxxx-1234-5678-90ab-xxxxxxxxxxxx&quot; #  生成随机 uuid，需和客户端保持一致,</span><br><span class="line">                        &quot;alterId&quot;: 64</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">	        &quot;streamSettings&quot;: &#123;</span><br><span class="line">                &quot;network&quot;: &quot;ws&quot;,  &#x2F;&#x2F;使用WebSocket协议</span><br><span class="line">                &quot;wsSettings&quot;: &#123;</span><br><span class="line">                    &quot;path&quot;: &quot;&#x2F;v2ray&quot;  &#x2F;&#x2F;这里指定的路径一定要与Nginx配置中匹配规则的路径一致</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;outbounds&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;protocol&quot;: &quot;freedom&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重启服务端： <code>systemctl restart v2ray</code>。</p>
<blockquote>
<p><strong>注意：</strong>如果在设置完成之后不能成功使用，可能是由于 SElinux 机制 (如果你是 CentOS 7 的用户请特别留意 SElinux 这一机制) 阻止了 Nginx 转发向内网的数据。如果是这样的话，在 V2Ray 的日志里不会有访问信息，在 Nginx 的日志里会出现大量的 “Permission Denied” 字段，要解决这一问题需要在终端下键入以下命令：<code>setsebool -P httpd_can_network_connect 1</code></p>
</blockquote>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>客户端我使用的是 <a href="https://github.com/Qv2ray/Qv2ray">Qv2ray</a>，安装后配置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;inbounds&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;listen&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">            &quot;port&quot;: 10808,</span><br><span class="line">            &quot;protocol&quot;: &quot;socks&quot;,</span><br><span class="line">            &quot;settings&quot;: &#123;</span><br><span class="line">                &quot;auth&quot;: &quot;noauth&quot;,</span><br><span class="line">                &quot;ip&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">                &quot;udp&quot;: true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;outbounds&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;protocol&quot;: &quot;vmess&quot;,</span><br><span class="line">            &quot;settings&quot;: &#123;</span><br><span class="line">                &quot;vnext&quot;: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;address&quot;: &quot;example.com&quot;,</span><br><span class="line">                        &quot;port&quot;: 443,</span><br><span class="line">                        &quot;users&quot;: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                &quot;id&quot;: &quot;xxxxxxxx-1234-5678-90ab-xxxxxxxxxxxx&quot;,</span><br><span class="line">                                &quot;alterId&quot;: 64</span><br><span class="line">                            &#125;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;streamSettings&quot;: &#123;</span><br><span class="line">                &quot;network&quot;: &quot;ws&quot;,</span><br><span class="line">                &quot;security&quot;: &quot;tls&quot;,</span><br><span class="line">                &quot;tlsSettings&quot;: &#123;</span><br><span class="line">                    &quot;allowInsecure&quot;: false</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;wsSettings&quot;: &#123;</span><br><span class="line">                    &quot;path&quot;: &quot;&#x2F;v2ray&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后，可使用 SwitchyOmega 等切换代理的插件将浏览器流量转发至 5055 端口，即可实现科学上网。</p>
<p><img src="https://cdn.jsdelivr.net/gh/jamesxwang/cdn/img/v2ray/v2ray-switchyomega.png"></p>
<h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>通过 websocket 协议走443端口伪造网页请求如图所示：<br><img src="https://cdn.jsdelivr.net/gh/jamesxwang/cdn/img/v2ray/process.png"></p>
<p>以该文的配置为例，请求链路如下：</p>
<p>浏览器输入网址<br>    ⬇️<br>SwitchyOmega 代理至本地 10808 端口<br>    ⬇️<br>本机 V2Ray 监听 10808 端口<br>    ⬇️<br>将流量通过 VMESS 和 WebSocket 协议请求 example.com/v2ray<br>    ⬇️<br>Nginx 反向代理到 5055 端口<br>    ⬇️<br>服务端 V2Ray 验证 id 和 alterId<br>    ⬇️<br>转发请求</p>
<p>另外，还可通过 CDN 加速拯救被ban ip，但可能会降低速度。</p>
]]></content>
      <categories>
        <category>Study Notes</category>
      </categories>
      <tags>
        <tag>v2ray</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>❄️ 北国风光 ❄️</title>
    <url>/2021/01/01/%E2%9D%84%EF%B8%8F%E5%8C%97%E5%9B%BD%E9%A3%8E%E5%85%89%E2%9D%84%EF%B8%8F/</url>
    <content><![CDATA[<p>跟朋友们在东北从2020年跨到2021年，真实地感受到了东北人的热情。<br>写此文记录一下去过的景点；<br>为了方便观看将照片拼在了一起；</p>
<a id="more"></a>
<h1 id="哈尔滨"><a href="#哈尔滨" class="headerlink" title="哈尔滨"></a>哈尔滨</h1><hr>
<p>从15度的上海出发，到达零下20度的哈尔滨，下飞机后在机场觉得也就还好的女朋友在仅仅2小时内便光速打脸；</p>
<h4 id="冰雪大世界"><a href="#冰雪大世界" class="headerlink" title="冰雪大世界"></a>冰雪大世界</h4><p>为了玩冰雪大世界的大滑梯俩人在一起遭罪冻了3个多小时排队也是拼了命了；<br><img src="/images/%E4%B8%9C%E5%8C%97/dongbei-1.jpg" alt="冰雪大世界"></p>
<h4 id="伏尔加庄园"><a href="#伏尔加庄园" class="headerlink" title="伏尔加庄园"></a>伏尔加庄园</h4><p>小众景点是我们的最爱了，逃避人群，感受一下纯净的雪～<br><img src="/images/%E4%B8%9C%E5%8C%97/dongbei-2.jpg" alt="伏尔加庄园"></p>
<h4 id="雪谷"><a href="#雪谷" class="headerlink" title="雪谷"></a>雪谷</h4><p>不会再来第二次…雾凇岭无人区也太冷了…不过只有这么冷才能玩的了泼水成冰哈哈<br><img src="/images/%E4%B8%9C%E5%8C%97/dongbei-3.jpg" alt="雪谷"><br><img src="/images/%E4%B8%9C%E5%8C%97/dongbei-4.jpg" alt="雪地摩托"></p>
<h1 id="吉林"><a href="#吉林" class="headerlink" title="吉林"></a>吉林</h1><h4 id="松花湖度假区"><a href="#松花湖度假区" class="headerlink" title="松花湖度假区"></a>松花湖度假区</h4><p>从此爱上滑雪，下次还会来的！<br><img src="/images/%E4%B8%9C%E5%8C%97/dongbei-5.jpg" alt="松花湖度假区"></p>
<h4 id="圣德泉"><a href="#圣德泉" class="headerlink" title="圣德泉"></a>圣德泉</h4><p>上半身零下20度，下半身零上40度的感受简直不要太酸爽…<br><img src="/images/%E4%B8%9C%E5%8C%97/dongbei-6.jpg" alt="圣德泉"></p>
]]></content>
      <categories>
        <category>Travel</category>
      </categories>
      <tags>
        <tag>travel</tag>
      </tags>
  </entry>
</search>
